Seccion Jenkins:

Lo primero es instalar Jenkins. Usamos una instalacion con el docker compose que esta en la carpeta dl curso. Bsaicamente solo instala jenkins.
Una vez terminado, te va a dar una clave de admin de un solo uso, instalas plugins recomendados y luego creas tu usuario y clave dej enkins.
No hace falta ir muy en detalle en este proceso, asique vamos directo al contenido:

Lo primero que hacemso con jenkins ya iniciado, en el caso de este proyecto es instalar maven y docker. Si vamos a configuracion vemos que hay 
muchisimas cosas para poder administrar, desde credenciales hasta herramientas. Ahoira vamos a ir a la opcion Global Tool Configuration, y vamois 
a instalar aca estos dos softwares como herramientas que podran ser usadas en multiples pipelines.

En la parte de abajo tenemos para añadir maven (para buildear) y docker.

Le damos en add maven y le damos en install automatically, Le das un nombre y guardamos. 

A priori lo primero que hacemos es crear el pipeline. Nuevo - pipeline

Vemos que nos da opcion de configurar muchas cosas. Lo primero que vemos es que nos deja poner un trigger, o sea cuando se va a correr el 
pipeline. En este caso vamos a usar la opcion de que sea periodico. Nos deja meter como si fuese para configurar crontab. Simplemente le 
ponemos * * * * * porque queremos uqe corra cada un min, pero eso se ve

Luego vamos a indicar que es lo que queremos correr. Vamos mas abajo y elegimos para hacerlo desde un SCM (Source code manager). Nos pide 
que elijamos cual vamos a usar, marcamos GIT, y nos hace introducir el repo a usar. El proyectyo en si es bastante sencillo igual que este 
procedimiento, es simplemente meter info para generar el pipeline. Es importante saber que al igual qu een docker se usa un dockerfile, en 
jenkins esta lo que se llama Jenkinsfile. Estamos usando uno aca y en el pipeline, y el contenido es:

node {
	stage('Build') {
		echo "Build"
	}
	stage('Test') {
		echo "Test"
	}
	stage('Integration Test') {
		echo "Test"
	}
}

Que pasa con esto? Pues al correr el pipeline vemos que la build se triggerea y hace lo que ves aca, que es muy sencillo. Te printea 
build, luego test y luego test den uevo, en 3 stages diferentes. Si buildeamos podemos ver la consola, y vemos que dice:

Started by user Julian
Obtained Jenkinsfile from git https://github.com/julianbjornsson/jenkins-devops-microservice
Running in Durability level: MAX_SURVIVABILITY
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/jenkins_home/workspace/jenkins-devops-pipeline-1
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Build)
[Pipeline] echo
Build
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Test)
[Pipeline] echo
Test
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Integration Test)
[Pipeline] echo
Test
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS

Es decir, nos da info del pipeline y de run que le hicimos, nos ejhecuta los stages que marcamos y nos da el resultado que, en este caos, 
es de success (logico, si solo estamos haciendo echo).

El jenkinsfile simple este tiene lo que se llama "node", como vemos. Aca estamos usando algo llamado "scripted pipeline", y la palabra node aca 
se refiere a una maquina en la que se corre el pipeline. Podes dividir el run de pipeline en multiples stages. Por ejemplo si haces para 
CI/CD, los stages serian build, test, int test, páckage, deploy y demas. Todos los stages se pueden ver, lo cual hace muy facil ver en que estado 
esta la ejecucion. En el caso de los scripted pipelnines, no es obligatorio usar stages, o sea podes poner solo los echo y funciona.

En el proximo segmento vemos la forma que se usa actualmente. La forma anterior (scripted pipelines) era la forma anterior de hacerlo. 
Ahora se hace lo que se llama declarative pipeline. En este nuevo metodo es obligatorio especificar stages y demas, es mas similar a 
azure devops, como veremos. El script queda algo asi:

pipeline {
	agent any
	stages {
		stage ('Build') {
			steps {
				echo "Build"
			}
		}
		stage ('Test') {
			steps {
				echo "Test"
			}
		}
		stage ('Integration Test') {
			steps {
				echo "Integration test"
			}
		}
	}
}

Vemos que el node ya no se usa, sino que usamos la keyword pipeline. En donde se va a correr? en el agent. El agent, funciona igual que 
en azure devops, es para especificar dodne queremos que se corra y nos da mucha mas flexibilidad. En este caos ponemos any porque no es importante
Luego dividimos en stages, usamos stages {} y dentro colo camos cada stage por separado como se muestra. Dentro de cada stage, el step, y cada 
step es que queremos hacer.

Commiteamos con el script que hice (meta.bat), Desde el vamois vemos que al ver el output, pasa mas cosas que haciendolo con el scripted way.
Lo que ocurre es que al hacerlo asi, se hace automaticamente un git checkout, hace una revision previa. ANtes cuando se hacia scripted se tenia 
que hacer un stage para que haga el checkout y demas. Con el declarative way lo hace automaticamente. Tambien vemos que podemos configurar 
mas coass para que pasen luego de que termine de correr la build . Vamos a agregarlo luego de los stages, como "post". Es decir, se corre 
luego de que se termine la ejecucion de la pipeline. Hay varios tipos de post, y los vemos en el ejemplo:

pipeline {
	agent any
	stages {
		stage ('Build') {
			steps {
				echo "Build"
			}
		}
		stage ('Test') {
			steps {
				echo "Test"
			}
		}
		stage ('Integration Test') {
			steps {
				echo "Integration test"
			}
		}
	} 
    
    post {
        always {
            echo 'SIEMPRE'
        }
        success {
            echo 'SUCCESSFULLY RUN'
        }
        failure {
            echo 'FAILURE'
        }
    }
}
Vemos que hay uno por cada posibilidad (por asi decirlo)

Commiteamos y buildeamos: al correr vemos que tambien nos trae SUCCESSFULLY y SIEMPRE, ya que buildeo ok y la otra la trae siempre.

AHora, vamos a usar una imagen de docker como agent. Recien vimos qe tambien podemos configurar los agents para correr el pipeline. Entonces, 
lo que vamos a probar ahora es eso. La forma para hacerlo es , en luigar de agent any:

agent { docker { image 'maven:3.6.3'} }

especificamos entre curly braces que usamos docker, y en otros la imagen a usar (entre comillas.)
Vamos a agregar esto a nuestro jenkinsfile, y tambien vamos a poner para que en el buildeo corra el comando mvn --version, y queda(ahi):

	agent { docker { image 'maven:3.6.3'} }
	stages {
		stage ('Build') {
			steps {
				sh 'mvn --version'
				echo "Build"
			}

Commit, buildeamos :


